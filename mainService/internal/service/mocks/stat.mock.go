// Code generated by MockGen. DO NOT EDIT.
// Source: stat.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	stat_v1 "github.com/Denterry/SocialNetwork/statisticsService/pkg/stat_v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStatisticsServiceClient is a mock of StatisticsServiceClient interface.
type MockStatisticsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsServiceClientMockRecorder
}

// MockStatisticsServiceClientMockRecorder is the mock recorder for MockStatisticsServiceClient.
type MockStatisticsServiceClientMockRecorder struct {
	mock *MockStatisticsServiceClient
}

// NewMockStatisticsServiceClient creates a new mock instance.
func NewMockStatisticsServiceClient(ctrl *gomock.Controller) *MockStatisticsServiceClient {
	mock := &MockStatisticsServiceClient{ctrl: ctrl}
	mock.recorder = &MockStatisticsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsServiceClient) EXPECT() *MockStatisticsServiceClientMockRecorder {
	return m.recorder
}

// TopNPosts mocks base method.
func (m *MockStatisticsServiceClient) TopNPosts(ctx context.Context, in *stat_v1.TopNPostsRequest, opts ...grpc.CallOption) (*stat_v1.TopNPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopNPosts", varargs...)
	ret0, _ := ret[0].(*stat_v1.TopNPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopNPosts indicates an expected call of TopNPosts.
func (mr *MockStatisticsServiceClientMockRecorder) TopNPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopNPosts", reflect.TypeOf((*MockStatisticsServiceClient)(nil).TopNPosts), varargs...)
}

// TopNUsers mocks base method.
func (m *MockStatisticsServiceClient) TopNUsers(ctx context.Context, in *stat_v1.TopNUsersRequest, opts ...grpc.CallOption) (*stat_v1.TopNUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TopNUsers", varargs...)
	ret0, _ := ret[0].(*stat_v1.TopNUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopNUsers indicates an expected call of TopNUsers.
func (mr *MockStatisticsServiceClientMockRecorder) TopNUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopNUsers", reflect.TypeOf((*MockStatisticsServiceClient)(nil).TopNUsers), varargs...)
}

// TotalViewsLikes mocks base method.
func (m *MockStatisticsServiceClient) TotalViewsLikes(ctx context.Context, in *stat_v1.TotalViewsLikesRequest, opts ...grpc.CallOption) (*stat_v1.TotalViewsLikesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TotalViewsLikes", varargs...)
	ret0, _ := ret[0].(*stat_v1.TotalViewsLikesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalViewsLikes indicates an expected call of TotalViewsLikes.
func (mr *MockStatisticsServiceClientMockRecorder) TotalViewsLikes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalViewsLikes", reflect.TypeOf((*MockStatisticsServiceClient)(nil).TotalViewsLikes), varargs...)
}
