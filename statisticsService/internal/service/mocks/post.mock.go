// Code generated by MockGen. DO NOT EDIT.
// Source: post.service.client.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	post_v1 "github.com/Denterry/SocialNetwork/postService/pkg/post_v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPostServiceClient is a mock of PostServiceClient interface.
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient.
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance.
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostServiceClient) CreatePost(ctx context.Context, in *post_v1.CreatePostRequest, opts ...grpc.CallOption) (*post_v1.PostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*post_v1.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServiceClientMockRecorder) CreatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServiceClient)(nil).CreatePost), varargs...)
}

// DeletePost mocks base method.
func (m *MockPostServiceClient) DeletePost(ctx context.Context, in *post_v1.DeletePostRequest, opts ...grpc.CallOption) (*post_v1.PostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*post_v1.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostServiceClientMockRecorder) DeletePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServiceClient)(nil).DeletePost), varargs...)
}

// GetListPosts mocks base method.
func (m *MockPostServiceClient) GetListPosts(ctx context.Context, in *post_v1.GetListPostsRequest, opts ...grpc.CallOption) (*post_v1.GetListPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListPosts", varargs...)
	ret0, _ := ret[0].(*post_v1.GetListPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListPosts indicates an expected call of GetListPosts.
func (mr *MockPostServiceClientMockRecorder) GetListPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPosts", reflect.TypeOf((*MockPostServiceClient)(nil).GetListPosts), varargs...)
}

// GetPostById mocks base method.
func (m *MockPostServiceClient) GetPostById(ctx context.Context, in *post_v1.GetPostByIdRequest, opts ...grpc.CallOption) (*post_v1.PostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostById", varargs...)
	ret0, _ := ret[0].(*post_v1.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockPostServiceClientMockRecorder) GetPostById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockPostServiceClient)(nil).GetPostById), varargs...)
}

// UpdatePost mocks base method.
func (m *MockPostServiceClient) UpdatePost(ctx context.Context, in *post_v1.UpdatePostRequest, opts ...grpc.CallOption) (*post_v1.PostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*post_v1.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostServiceClientMockRecorder) UpdatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServiceClient)(nil).UpdatePost), varargs...)
}
